# -*- coding: utf-8 -*-# @Time    : 2021/8/14 4:55 下午# @Author  : yangyuexiong# @Email   : yang6333yyx@126.com# @File    : case_bind_api.py# @Software: PyCharmimport jsonfrom all_reference import *from app.models.test_case.models import TestCase, TestCaseDatafrom app.models.test_case_assert.models import TestCaseAssertion, TestCaseDataAssBindfrom app.api.case_data_api.case_data_api import check_update_varclass CheckBind:    """业务校验"""    def __init__(self, case_id):        self.case_id = case_id        self.new_bind_dict = {}    @classmethod    def data_diff(cls, data_id_list):        """        检验用例参数是否存在        :param data_id_list: 用例参数id列表        :return:        """        query_data = TestCaseData.query.filter(            TestCaseData.id.in_(data_id_list),            TestCaseData.is_deleted == 0        ).all()        query_data_id_list = []        permission_error_list = []        for data_obj in query_data:            query_data_id_list.append(data_obj.id)            if not bool(data_obj.is_public) and data_obj.creator_id != g.app_user.id:                permission_error_list.append(data_obj.data_name)        check_diff = ActionSet.gen_difference(data_id_list, query_data_id_list)        return check_diff, permission_error_list    @classmethod    def assertion_diff(cls, assertion_id_list, assertion_type):        """        检验断言规则是否存在        :param assertion_id_list: 断言id列表        :param assertion_type:  断言类型        :return:        """        query_assertion = TestCaseAssertion.query.filter(            TestCaseAssertion.id.in_(assertion_id_list),            TestCaseAssertion.is_deleted == 0,            TestCaseAssertion.assertion_type == assertion_type,        ).all()        query_assertion_id_list = [assertion_obj.id for assertion_obj in query_assertion]        check_diff = ActionSet.gen_difference(assertion_id_list, query_assertion_id_list)        return check_diff    def update_case_data(self, update_hash_dict):        """        更新用例参数断言关系        :param update_hash_dict: 排序字典        :return:        """        for index, data in update_hash_dict.items():            data_info = data.get('data_info')            ass_resp_id_list = data.get('ass_resp_id_list')            ass_field_id_list = data.get('ass_field_id_list')            data_id = data_info.get('id')            data_name = data_info.get('data_name')            request_params_hash = data_info.get('request_params_hash', [])            request_params = gen_request_dict(request_params_hash)            request_headers_hash = data_info.get('request_headers_hash', [])            request_headers = gen_request_dict(request_headers_hash)            request_body_type = data_info.get('request_body_type')            _func = GlobalsDict.request_body_type_func().get(request_body_type)            request_body_hash = data_info.get('request_body_hash')            request_body = _func(request_body_hash)            update_var_list = data_info.get('update_var_list')            is_public = data_info.get('is_public', True)            is_before = data_info.get('is_before', False)            data_before = data_info.get('data_before', [])            is_after = data_info.get('is_after', False)            data_after = data_info.get('data_after', [])            data_size = len(json.dumps(request_params)) + len(json.dumps(request_headers)) + len(                json.dumps(request_body))            query_data = TestCaseData.query.get(data_id)            query_data.data_name = data_name            query_data.request_params_hash = request_params_hash            query_data.request_params = request_params            query_data.request_headers_hash = request_headers_hash            query_data.request_headers = request_headers            query_data.request_body_hash = request_body_hash            query_data.request_body = request_body            query_data.request_body_type = request_body_type            query_data.update_var_list = update_var_list            query_data.is_public = is_public            query_data.is_before = is_before            query_data.data_before = [] if not isinstance(data_before, list) else data_before            query_data.is_after = is_after            query_data.data_after = [] if not isinstance(data_after, list) else data_after            query_data.data_size = data_size            query_data.modifier = g.app_user.username            query_data.modifier_id = g.app_user.id            self.new_bind_dict[data_id] = {                "index": index,                "ass_resp_id_list": ass_resp_id_list,                "ass_field_id_list": ass_field_id_list            }        db.session.commit()    def create_case_data(self, create_hash_dict):        """        创建用例参数断言关系        :param create_hash_dict: 排序字典        :return:        """        for index, data in create_hash_dict.items():            data_info = data.get('data_info')            ass_resp_id_list = data.get('ass_resp_id_list')            ass_field_id_list = data.get('ass_field_id_list')            data_name = data_info.get('data_name')            request_params_hash = data_info.get('request_params_hash', [])            request_params = gen_request_dict(request_params_hash)            request_headers_hash = data_info.get('request_headers_hash', [])            request_headers = gen_request_dict(request_headers_hash)            request_body_type = data_info.get('request_body_type')            _func = GlobalsDict.request_body_type_func().get(request_body_type)            request_body_hash = data_info.get('request_body_hash')            request_body = _func(request_body_hash)            update_var_list = data_info.get('update_var_list')            is_public = data_info.get('is_public')            is_before = data_info.get('is_before')            data_before = data_info.get('data_before', [])            is_after = data_info.get('is_after')            data_after = data_info.get('data_after', [])            data_size = len(json.dumps(request_params)) + len(json.dumps(request_headers)) + len(                json.dumps(request_body))            new_data = TestCaseData(                data_name=data_name,                request_params_hash=request_params_hash,                request_params=request_params,                request_headers_hash=request_headers_hash,                request_headers=request_headers,                request_body_hash=request_body_hash,                request_body=request_body,                request_body_type=request_body_type,                update_var_list=update_var_list,                is_public=is_public,                is_before=is_before,                data_before=[] if not isinstance(data_before, list) else data_before,                is_after=is_after,                data_after=[] if not isinstance(data_after, list) else data_after,                data_size=data_size,                creator=g.app_user.username,                creator_id=g.app_user.id            )            db.session.add(new_data)            db.session.commit()            data_id = new_data.id            self.new_bind_dict[data_id] = {                "index": index,                "ass_resp_id_list": ass_resp_id_list,                "ass_field_id_list": ass_field_id_list            }        db.session.commit()    def bind_case_data(self):        """绑定用例与参数"""        # 删除旧的关联关系        query_bind_all = TestCaseDataAssBind.query.filter_by(case_id=self.case_id).all()        obj_id_list = list(map(lambda bind: bind.id, query_bind_all))        db.session.query(TestCaseDataAssBind).filter(TestCaseDataAssBind.id.in_(obj_id_list)).delete(            synchronize_session=False)        # 创建新的关联关系        for data_id, assertion in self.new_bind_dict.items():            index = assertion.get('index')            ass_resp_id_list = assertion.get('ass_resp_id_list')            ass_field_id_list = assertion.get('ass_field_id_list')            case_bind = TestCaseDataAssBind(                case_id=self.case_id,                data_id=data_id,                ass_resp_id_list=ass_resp_id_list,                ass_field_id_list=ass_field_id_list,                index=index,                creator=g.app_user.username,                creator_id=g.app_user.id            )            db.session.add(case_bind)        db.session.commit()def bind_decorator(func):    @wraps(func)    def wrapper(*args, **kwargs):        data = request.get_json()        case_id = data.get('case_id')        data_list = data.get('data_list', [])        query_case = TestCase.query.get(case_id)        if not query_case:            return api_result(code=NO_DATA, message="用例不存在")        if not data_list:            return api_result(code=SUCCESS, message=SUCCESS_MESSAGE)        return func(*args, **kwargs)    return wrapperclass CaseBindApi(MethodView):    """    用例绑定-数据-断言-变量Api    """    @bind_decorator    def post(self):        """用例绑定-数据-断言-变量"""        data = request.get_json()        case_id = data.get('case_id')        data_list = data.get('data_list', [])        update_data_id_list = []        update_hash_dict = {}        create_hash_dict = {}        for index, d in enumerate(data_list, 1):            # 校验断言规则            ass_resp_id_list = d.get('ass_resp_id_list')            ass_field_id_list = d.get('ass_field_id_list')            if ass_resp_id_list:                ass_diff_result = CheckBind.assertion_diff(ass_resp_id_list, 'response')                if ass_diff_result:                    return api_result(code=NO_DATA, message=f'响应断言规则: {ass_diff_result} 不存在')            if ass_field_id_list:                ass_diff_result = CheckBind.assertion_diff(ass_field_id_list, 'field')                if ass_diff_result:                    return api_result(code=NO_DATA, message=f'字段断言规则: {ass_diff_result} 不存在')            data_info = d.get('data_info', {})            data_id = data_info.get('id', None)            # 校验关系变量            update_var_list = data_info.get('update_var_list', [])            _update_var_list_bool, _update_var_list_msg = check_update_var(update_var_list=update_var_list)            if not _update_var_list_bool:                return api_result(code=BUSINESS_ERROR, message=_update_var_list_msg)            if data_id:                update_hash_dict[index] = d                update_data_id_list.append(data_id)            else:                create_hash_dict[index] = d        # 检验更新的用例参数是否存在        data_diff_result, permission_error_list = CheckBind.data_diff(update_data_id_list)        if data_diff_result:            return api_result(code=NO_DATA, message=f'用例参数: {data_diff_result} 不存在')        # 检验更新的用例权限        if permission_error_list:            message = "，".join(permission_error_list)            return api_result(code=BUSINESS_ERROR, message=f"用例参数 ({message}) 未开放，只能被创建人修改")        cb = CheckBind(case_id=case_id)        cb.update_case_data(update_hash_dict)        cb.create_case_data(create_hash_dict)        cb.bind_case_data()        return api_result(code=POST_SUCCESS, message=SUCCESS_MESSAGE)