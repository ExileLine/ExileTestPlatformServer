# -*- coding: utf-8 -*-# @Time    : 2021/8/14 4:55 下午# @Author  : yangyuexiong# @Email   : yang6333yyx@126.com# @File    : case_bind_api.py# @Software: PyCharmfrom all_reference import *from app.models.test_case.models import TestCase, TestCaseDatafrom app.models.test_case_assert.models import TestCaseDataAssBindfrom app.api.case_data_api.case_data_api import check_update_vardef update_case_data(query_data, data_info, is_public, update_var_list):    """    更新参数    :param query_data: 查询结果对象    :param data_info: 入参对象    :param is_public: 在外层处理后传入    :param update_var_list: 更新变量列表,在外层处理后传入    :return:    """    request_headers = data_info.get('request_headers', {})    request_params = data_info.get('request_params', {})    request_body = data_info.get('request_body', {})    # data_size = len(json.dumps(request_params)) + len(json.dumps(request_headers)) + len(    #     json.dumps(request_body))    is_before = data_info.get('is_before')    data_before = data_info.get('data_before')    is_after = data_info.get('is_after')    data_after = data_info.get('data_after')    query_data.request_headers = json.loads(request_headers)    query_data.request_params = json.loads(request_params)    query_data.request_body = json.loads(request_body)    query_data.request_body_type = data_info.get('request_body_type')    query_data.update_var_list = update_var_list    query_data.is_public = is_public    # query_data.data_size = data_size    query_data.is_before = is_before if is_before in (0, 1) else 0    query_data.data_before = [] if not isinstance(data_before, list) else data_before    query_data.is_after = is_after if is_after in (0, 1) else 0    query_data.data_after = [] if not isinstance(data_after, list) else data_after    query_data.modifier = g.app_user.username    query_data.modifier_id = g.app_user.iddef reset_params(case_obj):    """重置 request_params"""    url = case_obj.request_url    try:        request_params = {}        if "?" in url:            split_list = url.split("?")[1].split("&")            for i in split_list:                kv = i.split('=')                key = kv[0]                val = kv[1]                request_params[key] = val        return request_params    except BaseException as e:        print(str(e))        return {}def update_data_params(case_obj, data_obj):    """更新参数params值"""    data_obj.request_params = reset_params(case_obj)def gen_default_data(case_obj):    """生成默认参数"""    case_id = case_obj.id    query_base_data = TestCaseDataAssBind.query.filter_by(case_id=case_id, is_base=1).first()    if not query_base_data:        request_params = reset_params(case_obj)        new_data = TestCaseData(            data_name=f"用例: {case_id} 基础参数",            request_params=request_params,            request_headers={},            request_body={},            request_body_type=2,            update_var_list=[],            is_public=1,            data_size=0,            creator=g.app_user.username,            creator_id=g.app_user.id        )        new_data.save()        case_bind = TestCaseDataAssBind(            case_id=case_id,            data_id=new_data.id,            ass_resp_id_list=[],            ass_field_id_list=[],            is_base=1,            creator=g.app_user.username,            creator_id=g.app_user.id        )        case_bind.save()        return Trueclass CaseBindApi(MethodView):    """    用例绑定-数据-断言-变量Api    """    def post(self):        """用例绑定-数据-断言-变量(新增)"""        data = request.get_json()        case_id = data.get('case_id')        data_list = data.get('data_list', [])        query_case = TestCase.query.get(case_id)        if not query_case:            return api_result(code=400, message=f"用例: {case_id} 不存在")        if not data_list:            gen_default_data(query_case)            return api_result(code=201, message="操作成功")        for d in data_list:            data_info = d.get('data_info')            data_id = data_info.get('id')            data_name = data_info.get('data_name')            ass_resp_id_list = data.get('ass_resp_id_list', [])  # TODO 检查 ass_resp_id_list 中的 id 是否存在            ass_field_id_list = data.get('ass_field_id_list', [])  # TODO 检查 ass_field_id_list 中的 id 是否存在            query_data = TestCaseData.query.get(data_id)            if not query_data:                return api_result(code=400, message=f"参数: {data_name} 不存在")            is_public = data_info.get('is_public')            is_public = bool(is_public) if isinstance(is_public, bool) or isinstance(is_public, int) else True            if not bool(is_public) and query_data.creator_id != g.app_user.id:                return api_result(code=400, message='非创建人，无法修改使用状态')            if not bool(query_data.is_public):                if query_data.creator_id != g.app_user.id:                    return api_result(code=400, message='该参数未开放,只能被创建人修改!')            update_var_list = data_info.get('update_var_list')            _update_var_list_bool, _update_var_list_msg = check_update_var(update_var_list=update_var_list)            if not _update_var_list_bool:                return api_result(code=400, message=_update_var_list_msg)            update_case_data(                query_data=query_data,                data_info=data_info,                is_public=is_public,                update_var_list=update_var_list            )            update_data_params(case_obj=query_case, data_obj=query_data)            case_bind = TestCaseDataAssBind(                case_id=case_id,                data_id=data_id,                ass_resp_id_list=ass_resp_id_list,                ass_field_id_list=ass_field_id_list,                creator=g.app_user.username,                creator_id=g.app_user.id            )            db.session.add(case_bind)        db.session.commit()        return api_result(code=201, message="操作成功")    def put(self):        """用例绑定-数据-断言-变量(编辑)"""        data = request.get_json()        case_id = data.get('case_id')        data_list = data.get('data_list', [])        query_case = TestCase.query.get(case_id)        if not query_case:            return api_result(code=400, message=f"用例: {case_id} 不存在")        query_bind_all = TestCaseDataAssBind.query.filter_by(case_id=case_id, is_base=0).all()        obj_id_list = list(map(lambda bind: bind.id, query_bind_all))        db.session.query(TestCaseDataAssBind).filter(TestCaseDataAssBind.id.in_(obj_id_list)).delete(            synchronize_session=False)        if not data_list:            gen_default_data(query_case)            db.session.commit()            return api_result(code=203, message="操作成功")        for d in data_list:            data_info = d.get('data_info')            data_id = data_info.get('id')            data_name = data_info.get('data_name')            ass_resp_id_list = d.get('ass_resp_id_list', [])  # TODO 检查 ass_resp_id_list 中的 id 是否存在            ass_field_id_list = d.get('ass_field_id_list', [])  # TODO 检查 ass_field_id_list 中的 id 是否存在            query_data = TestCaseData.query.get(data_id)            if not query_data:                return api_result(code=400, message=f"参数: {data_name} 不存在")            is_public = data_info.get('is_public')            is_public = bool(is_public) if isinstance(is_public, bool) or isinstance(is_public, int) else True            if not bool(is_public) and query_data.creator_id != g.app_user.id:                return api_result(code=400, message='非创建人，无法修改使用状态')            if not bool(query_data.is_public):                if query_data.creator_id != g.app_user.id:                    return api_result(code=400, message='该参数未开放,只能被创建人修改!')            update_var_list = data_info.get('update_var_list')            _update_var_list_bool, _update_var_list_msg = check_update_var(update_var_list=update_var_list)            if not _update_var_list_bool:                return api_result(code=400, message=_update_var_list_msg)            update_case_data(                query_data=query_data,                data_info=data_info,                is_public=is_public,                update_var_list=update_var_list            )            query_base = TestCaseDataAssBind.query.filter_by(case_id=case_id, data_id=data_id, is_base=1).first()            if not query_base:                update_data_params(case_obj=query_case, data_obj=query_data)                case_bind = TestCaseDataAssBind(                    case_id=case_id,                    data_id=data_id,                    ass_resp_id_list=ass_resp_id_list,                    ass_field_id_list=ass_field_id_list,                    modifier=g.app_user.username,                    modifier_id=g.app_user.id                )                db.session.add(case_bind)            else:                update_data_params(case_obj=query_case, data_obj=query_data)        db.session.commit()        return api_result(code=203, message="操作成功")class CaseBindDataApi(MethodView):    """    用例配置数据Api    """    def post(self):        """用例绑定数据"""        data = request.get_json()        case_id = data.get('case_id')        data_id = data.get('data_id')        query_case = TestCase.query.get(case_id)        query_case_data = TestCaseData.query.get(data_id)        if not query_case:            return api_result(code=400, message='用例id不存在:{}'.format(case_id))        if not query_case_data:            return api_result(code=400, message='用例参数id不存在:{}'.format(data_id))        query_bind = TestCaseDataAssBind.query.filter_by(case_id=case_id, data_id=data_id).first()        if not query_bind:            new_bind = TestCaseDataAssBind(                case_id=case_id,                data_id=data_id,                creator=g.app_user.username,                creator_id=g.app_user.id            )            db.session.add(new_bind)            db.session.commit()            return api_result(code=203, message='绑定成功')        if query_bind.is_deleted == 0:            return api_result(code=400, message='用例:{} 已经绑定:{}'.format(case_id, data_id))        if query_bind.is_deleted != 0:            query_bind.is_deleted = 0            db.session.commit()            return api_result(code=201, message='状态更新成功,绑定成功')    def put(self):        """用例数据解绑"""        data = request.get_json()        case_id = data.get('case_id')        data_id = data.get('data_id')        query_bind = TestCaseDataAssBind.query.filter_by(case_id=case_id, data_id=data_id).first()        if not query_bind:            return api_result(code=400, message='解除绑定失败:错误的case_id:{} 或 data_id:{}'.format(case_id, data_id))        query_bind.is_deleted = query_bind.id        query_bind.ass_resp_id_list = []        query_bind.ass_field_id_list = []        query_bind.modifier = g.app_user.username        query_bind.modifier_id = g.app_user.id        db.session.commit()        return api_result(code=203, message='状态更新成功,解除绑定成功')class CaseBindRespAssApi(MethodView):    """Resp断言规则绑定"""    def post(self):        """Resp断言规则绑定"""        data = request.get_json()        bind_id = data.get('bind_id')        ass_resp_ids = data.get('ass_resp_ids', [])        if not isinstance(ass_resp_ids, list):            return ab_code(400)        query_bind = TestCaseDataAssBind.query.get(bind_id)        if not query_bind:            return api_result(code=400, message='bind_id:{}不存在'.format(bind_id))        if query_bind.is_deleted != 0:            return api_result(code=400, message='已删除is_deleted:{}'.format(query_bind.is_deleted))        query_bind.ass_resp_id_list = ass_resp_ids        query_bind.modifier = g.app_user.username        query_bind.modifier_id = g.app_user.id        db.session.commit()        return api_result(code=201, message='Resp检验规则绑定成功')class CaseBindFieldAssApi(MethodView):    """Field断言规则绑定"""    def post(self):        """Field断言规则绑定"""        data = request.get_json()        bind_id = data.get('bind_id')        ass_field_ids = data.get('ass_field_ids', [])        if not isinstance(ass_field_ids, list):            return ab_code(400)        query_bind = TestCaseDataAssBind.query.get(bind_id)        if not query_bind:            return api_result(code=400, message='bind_id:{}不存在'.format(bind_id))        if query_bind.is_deleted != 0:            return api_result(code=400, message='已删除is_deleted:{}'.format(query_bind.is_deleted))        query_bind.ass_field_id_list = ass_field_ids        query_bind.modifier = g.app_user.username        query_bind.modifier_id = g.app_user.id        db.session.commit()        return api_result(code=201, message='Field检验规则绑定成功')